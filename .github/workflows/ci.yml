name: CI Smoke Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    # export env vars so compose ports and broker URL aren’t empty
    env:
      FASTAPI_PORT: 8000
      CELERY_BROKER_URL: redis://redis:6379/0

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Compose plugin
        run: docker compose version

      - name: Build all images
        run: docker compose build --no-cache

      - name: Start all services
        run: docker compose up -d --remove-orphans

      - name: Wait for API to be healthy
        run: |
          for i in {1..15}; do
            if curl -fs http://localhost:${FASTAPI_PORT}/health; then
              echo "API is up"
              exit 0
            fi
            sleep 2
          done
          echo "API did not become healthy" >&2
          exit 1

      - name: Run smoke-test transcription
        run: |
          # send test file, capture task_id
          RESPONSE=$(curl -s -F "file=@tests/fixtures/sample.wav" http://localhost:${FASTAPI_PORT}/transcribe)
          echo "Response: $RESPONSE"
          TASK_ID=$(echo "$RESPONSE" | jq -r .task_id)
          echo "Got task_id: $TASK_ID"

          # poll for up to 60 seconds
          for i in {1..30}; do
            STATUS=$(curl -s http://localhost:${FASTAPI_PORT}/result/${TASK_ID} | jq -r .status)
            echo "Attempt $i: status=$STATUS"
            if [ "$STATUS" = "SUCCESS" ]; then
              curl -s http://localhost:${FASTAPI_PORT}/result/${TASK_ID} | jq .
              echo "✅ Transcription succeeded"
              exit 0
            fi
            sleep 2
          done

          echo "❌ Transcription did not complete in time" >&2
          exit 1

      - name: Tear down services
        run: docker compose down --remove-orphans