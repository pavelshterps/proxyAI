version: "3.8"
services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - proxyai_net

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - db
      - redis
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_NAME}
      - API_WORKERS=${API_WORKERS}
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      - /path/to/hf_cache_host:/hf_cache:rw
      - ./app.db:/app/app.db
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3

  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - redis
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_NAME}
      - WHISPER_DEVICE=cpu
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      - /path/to/hf_cache_host:/hf_cache:rw
    command: >
      celery -A tasks worker
      --loglevel=info
      --concurrency=${CPU_CONCURRENCY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3

  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    restart: unless-stopped
    depends_on:
      - redis
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_NAME}
      - WHISPER_DEVICE=cuda
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      - hf-cache:/hf_cache:rw
      - ctranslate2-cache:/root/.cache/ctranslate2
    command: >
      celery -A tasks worker
      --loglevel=info
      --concurrency=${GPU_CONCURRENCY}
      --queues=preprocess_gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    runtime: nvidia
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - redis
    env_file: .env
    command: >
      celery -A tasks beat
      --loglevel=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3

  flower:
    image: mher/flower:0.9.7
    restart: unless-stopped
    env_file: .env
    ports:
      - "5555:5555"
    command:
      - flower
      - "--broker=${CELERY_BROKER_URL}"
      - "--basic_auth=${FLOWER_USER}:${FLOWER_PASS}"
      - "--port=5555"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      retries: 3

volumes:
  postgres_data:
  redis-data:
  upload-data:
  results-data:
  diarizer-cache:
  hf-cache:
  ctranslate2-cache:

networks:
  proxyai_net: