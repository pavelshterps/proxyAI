version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-api
    env_file: .env
    volumes:
      - upload-data:/tmp/uploads
      - results-data:/tmp/results
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - tusd
    command: >
      sh -c "uvicorn main:app --host 0.0.0.0 --port 8000 --workers ${API_WORKERS}"

  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-cpu-worker
    env_file: .env
    volumes:
      - upload-data:/tmp/uploads
      - results-data:/tmp/results
      - hf_cache:/hf_cache:ro
    depends_on:
      - redis
    command: >
      celery -A celery_app worker
      --loglevel=info
      --concurrency ${CPU_CONCURRENCY}
      --hostname cpu-worker
      --queues preprocess_cpu

  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: proxyai-gpu-worker
    environment:
      - DIARIZER_CACHE_DIR=/tmp/diarizer_cache
      - WHISPER_MODEL_PATH=/hf_cache/models--guillaumekln--faster-whisper-mediu
    env_file: .env
    volumes:
      - upload-data:/tmp/uploads
      - results-data:/tmp/results
      - hf_cache:/hf_cache:ro
      - ctranslate2-cache:/root/.cache/ctranslate2
    depends_on:
      - redis
    runtime: nvidia
    deploy:
      resources:
        limits:
          memory: 4g
    command: >
      celery -A celery_app worker
      --loglevel=info
      --concurrency ${GPU_CONCURRENCY}
      --hostname gpu-worker
      --queues preprocess_gpu

  redis:
    image: redis:7-alpine
    container_name: proxyai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - /path/to/hf_cache_host:/hf_cache:ro
      - /path/to/hf_cache_host/quantized:/hf_cache/quantized:rw

  tusd:
    image: tusproject/tusd:latest
    container_name: proxyai-tusd
    restart: unless-stopped
    ports:
      - "1080:1080"
    command:
      - tusd
      - --host=0.0.0.0
      - --port=1080
      - --dir=/data
    volumes:
      - upload-data:/data

  flower:
    image: mher/flower:latest
    container_name: proxyai-flower
    restart: unless-stopped
    env_file: .env
    depends_on:
      - redis
    entrypoint:
      - celery
      - flower
    command:
      - --broker=${CELERY_BROKER_URL}
      - --port=5555
    ports:
      - "5555:5555"

volumes:
  upload-data:
  redis-data:
  results-data:
  hf_cache:
  ctranslate2-cache: