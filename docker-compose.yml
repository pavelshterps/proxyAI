version: "3.8"

services:
  tusd:
    image: tusproject/tusd:latest    # но проверьте, что в Docker Hub эта метка существует
    ports:
      - "1080:1080"
    command: [ "tusd", "-upload-dir", "/files" ]
    volumes:
      - upload-data:/files
  redis:
    image: redis:7-alpine

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "${FASTAPI_PORT}:8000"
    volumes:
      - upload-data:/tmp/uploads
      - ./static:/app/static       # если у вас есть фронтенд
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 5s
      retries: 5

  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command:
      celery -A celery_app.celery_app worker \
      --loglevel=info \
      --concurrency=${WORKER_CPU_CONCURRENCY} \
      -Q preprocess_cpu
    depends_on:
      - redis
    volumes:
      - upload-data:/tmp/uploads
      - hf_cache:/hf_cache

  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    runtime: nvidia
    env_file: .env
    command:
      celery -A celery_app.celery_app worker \
      --loglevel=info \
      --concurrency=${WORKER_GPU_CONCURRENCY} \
      -Q preprocess_gpu
    depends_on:
      - redis
    volumes:
      - upload-data:/tmp/uploads
      - hf_cache:/hf_cache

  flower:
    image: mher/flower:1.0.0          # последняя доступная версия
    env_file: .env
    command: >
      celery --broker=${CELERY_BROKER_URL}
             flower
             --port=5555
             --url_prefix=flower
    ports:
      - "5555:5555"
    depends_on:
      - redis

  integration-test:
    image: python:3.10-slim
    env_file: .env
    working_dir: /app
    volumes:
      - .:/app:cached
    depends_on:
      api:
        condition: service_healthy
      cpu-worker:
        condition: service_started
      gpu-worker:
        condition: service_started
    entrypoint:
      ["pytest", "-q", "--disable-warnings", "--maxfail=1", "tests/test_integration.py"]
    restart: "no"

volumes:
  upload-data:
  hf_cache: