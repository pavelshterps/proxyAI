version: "3.9"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-api
    restart: on-failure
    env_file:
      - .env
      - .env.example
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      tusd:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - upload-data:/tmp/uploads

  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-cpu-worker
    restart: on-failure
    env_file:
      - .env
      - .env.example
    environment:
      - DEVICE=cpu
      - WHISPER_COMPUTE_TYPE=float32
    depends_on:
      redis:
        condition: service_healthy
    command: >
      celery -A celery_app worker
      -Q preprocess
      --concurrency=${CELERY_CONCURRENCY}
      --loglevel=info
      -E
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'celery.*worker' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - upload-data:/tmp/uploads

  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: proxyai-gpu-worker
    restart: on-failure
    runtime: nvidia
    env_file:
      - .env
      - .env.example
    environment:
      - DEVICE=cuda
      - WHISPER_COMPUTE_TYPE=float16
    depends_on:
      redis:
        condition: service_healthy
    command: >
      celery -A celery_app worker
      -Q preprocess
      --concurrency=1
      --loglevel=info
      -E
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'celery.*worker' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - upload-data:/tmp/uploads

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-flower
    restart: on-failure
    env_file:
      - .env
      - .env.example
    depends_on:
      redis:
        condition: service_healthy
    command: >
      celery -A celery_app flower
      --port=5555
    ports:
      - "5555:5555"

  redis:
    image: redis:7-alpine
    container_name: proxyai-redis
    restart: on-failure
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - redis-data:/data

  tusd:
    image: tusproject/tusd:latest
    container_name: proxyai-tusd
    restart: on-failure
    ports:
      - "1080:1080"

volumes:
  upload-data:
  redis-data: