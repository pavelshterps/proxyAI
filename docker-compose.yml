version: "3.9"
services:
  # file upload endpoint
  tusd:
    image: tusproject/tusd:latest
    container_name: proxyai-tusd
    ports:
      - "1080:1080"
    command:
      - "-host=0.0.0.0"
      - "-port=1080"
      - "-upload-dir=/uploads"
    volumes:
      - upload-data:/uploads

  # fast, in-memory broker & result store
  redis:
    image: redis:7-alpine
    container_name: proxyai-redis
    ports:
      - "6379:6379"

  # HTTP API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-api
    restart: unless-stopped
    env_file: .env
    ports:
      - "${FASTAPI_HOST}:${FASTAPI_PORT}:${FASTAPI_PORT}"
    volumes:
      - upload-data:/tmp/uploads

  # CPU-only worker for pyannote diarization
  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-cpu-worker
    restart: unless-stopped
    env_file: .env
    command: >
      celery -A celery_app worker
      --loglevel=info
      --concurrency=${CELERY_CONCURRENCY}
      -Q preprocess_cpu
    volumes:
      - upload-data:/tmp/uploads
      - hf_cache:/hf_cache

  # GPU-accelerated worker for chunked Whisper transcription
  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: proxyai-gpu-worker
    restart: unless-stopped
    env_file: .env
    deploy:
      resources:
        limits:
          memory: 4g
    # depending on your Docker Compose version you can use either `gpus: all` (v2.4+) or:
    #   runtime: nvidia
    gpus: all
    command: >
      celery -A celery_app worker
      --loglevel=info
      --concurrency=${GPU_CONCURRENCY}
      -Q preprocess_gpu
      --without-gossip --without-mingle --without-heartbeat
    volumes:
      - upload-data:/tmp/uploads
      - hf_cache:/hf_cache

  # Flower monitoring UI
  flower:
    image: mher/flower:1.0.0
    container_name: proxyai-flower
    restart: unless-stopped
    env_file: .env
    command: >
      flower -A celery_app --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis

volumes:
  upload-data:
  hf_cache: