version: "3.8"
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
    ports:
      - "8000:8000"
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3

  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
    depends_on:
      - redis
    command:
      ["celery", "-A", "celery_app", "worker",
       "--loglevel=info",
       "--concurrency=${CPU_CONCURRENCY}",
       "--hostname=cpu-worker",
       "--queues=preprocess_cpu",
       "--prefetch-multiplier=1"]
    restart: unless-stopped

  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    env_file: .env
    runtime: nvidia
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      - ctranslate2-cache:/root/.cache/ctranslate2
    depends_on:
      - redis
    command:
      ["celery", "-A", "celery_app", "worker",
       "--loglevel=info",
       "--concurrency=1",
       "--hostname=gpu-worker",
       "--queues=preprocess_gpu",
       "--prefetch-multiplier=1"]
    restart: unless-stopped

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      - redis
    command:
      ["celery", "-A", "celery_app", "beat", "--loglevel=info"]
    restart: unless-stopped

  metrics:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command: ["python", "metrics.py"]
    ports:
      - "${METRICS_PORT}:${METRICS_PORT}"
    depends_on:
      - cpu-worker
      - gpu-worker
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3

  flower:
    image: mher/flower:latest
    env_file: .env
    ports:
      - "5555:5555"
    command:
      - flower
      - "--broker=${CELERY_BROKER_URL}"
      - "--basic_auth=${FLOWER_USER}:${FLOWER_PASS}"
      - "--port=5555"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      retries: 3

volumes:
  upload-data:
  results-data:
  diarizer-cache:
  ctranslate2-cache:
  redis-data: