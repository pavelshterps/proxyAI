version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-api
    env_file: .env
    volumes:
      - upload-data:/tmp/uploads
      - results-data:/tmp/results
    depends_on:
      - redis
      - tusd
    ports:
      - "${API_PORT:-8000}:8000"
    command: >
      sh -c "uvicorn main:app --host 0.0.0.0 --port 8000 --workers ${API_WORKERS:-1}"

  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: proxyai-cpu-worker
    env_file: .env
    volumes:
      - upload-data:/tmp/uploads
      - results-data:/tmp/results
      - diarizer-cache:/tmp/diarizer_cache
    depends_on:
      - redis
    command: >
      celery -A celery_app worker
      --loglevel=${CELERY_LOGLEVEL:-info}
      --concurrency ${CPU_CONCURRENCY:-1}
      --hostname cpu-worker
      --queues preprocess_cpu
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis", "ping"]
      interval: 30s
      retries: 3

  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    container_name: proxyai-gpu-worker
    env_file: .env
    volumes:
      - upload-data:/tmp/uploads
      - results-data:/tmp/results
      - /path/to/hf_cache_host:/hf_cache:rw
      - ctranslate2-cache:/root/.cache/ctranslate2
    depends_on:
      - redis
    runtime: nvidia
    command: >
      celery -A celery_app worker
      --loglevel=${CELERY_LOGLEVEL:-info}
      --concurrency ${GPU_CONCURRENCY:-1}
      --hostname gpu-worker
      --queues preprocess_gpu
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "redis", "ping"]
      interval: 30s
      retries: 3

  flower:
    image: mher/flower:latest
    container_name: proxyai-flower
    env_file: .env
    depends_on:
      - redis
      - api
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    # запускаем через celery, а не напрямую "flower"
    command: >
      celery -A celery_app flower
      --broker=${CELERY_BROKER_URL}
      --basic_auth=${FLOWER_USER}:${FLOWER_PASS}
      --port=5555
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FLOWER_PORT:-5555}/"]
      interval: 30s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: proxyai-redis
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 3
    restart: unless-stopped

  tusd:
    image: tusproject/tusd:latest
    container_name: proxyai-tusd
    restart: unless-stopped
    ports:
      - "${TUSD_PORT:-1080}:1080"
    command:
      - tusd
      - --host=0.0.0.0
      - --port=1080
      - --dir=/data
    volumes:
      - upload-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${TUSD_PORT:-1080}/"]
      interval: 30s
      retries: 3

volumes:
  upload-data:
  results-data:
  diarizer-cache:
  ctranslate2-cache:
  redis-data: