version: "3.8"
services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_NAME}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - proxyai_net

    # Heathcheck для того, чтобы Compose ждал, пока БД действительно примет соединения
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:secret@db:5432/proxyai
      - API_WORKERS
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      # Монтируем HF-кеш (модель квантована FP16) с хоста:
      - /path/to/hf_cache_host:/hf_cache:rw
    ports:
      - "8000:8000"

    # Ждём, пока БД и Redis будут "healthy"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      retries: 3

  cpu-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:secret@db:5432/proxyai
      - WHISPER_DEVICE=cpu
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - /path/to/hf_cache_host:/data/diarizer_cache:ro
      - /path/to/hf_cache_host:/hf_cache:rw
    depends_on:
      redis:
        condition: service_healthy
    command:
      ["celery", "-A", "tasks", "worker", "--loglevel=info", "--concurrency=1"]
    restart: unless-stopped

  gpu-worker:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    env_file: .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:secret@db:5432/proxyai
      - NVIDIA_VISIBLE_DEVICES=all
      - WHISPER_DEVICE=cuda
    runtime: nvidia
    volumes:
      - upload-data:/data/uploads
      - results-data:/data/results
      - diarizer-cache:/data/diarizer_cache
      - ctranslate2-cache:/root/.cache/ctranslate2
      - /path/to/hf_cache_host:/hf_cache:rw
    depends_on:
      redis:
        condition: service_healthy
    command:
      ["celery", "-A", "tasks", "worker", "--loglevel=info", "--concurrency=1", "--queues=preprocess_gpu"]
    restart: unless-stopped

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
    command:
      ["celery", "-A", "tasks", "beat", "--loglevel=info"]
    restart: unless-stopped

  flower:
    image: mher/flower:0.9.7
    env_file: .env
    ports:
      - "5555:5555"
    command:
      - flower
      - "--broker=${CELERY_BROKER_URL}"
      - "--basic_auth=${FLOWER_USER}:${FLOWER_PASS}"
      - "--port=5555"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555"]
      interval: 30s
      retries: 3

volumes:
  postgres_data:
  redis-data:
  upload-data:
  results-data:
  diarizer-cache:
  ctranslate2-cache:
  hf-cache:

networks:
  proxyai_net: